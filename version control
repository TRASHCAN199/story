version control:
let assume that we want to creat a new file and write a few lines in it. And now we decide to put in under version control using git 
and we call the save point as no.1. later on as we progress we write few more lines of code and we decide to make an other save point 
called sace point no.2 . further down the line we acdentally mess up the code to the point where we would start from scratch rather than 
continue our code, so we simply want to role back to the last save point. we can do that using git. we can compare the current code file 
with the previous versions that we have made or alternatively we can roll back to previous versions. 

commands:
git init : this command initiallizes an empty git reposotory inside the working directory/ current directory

ls -a : shows all files incuding hidden files

in order to start tracking the chages in the files, then we need to add the files to what is called a staging area. it is basically an 
intermediate place where we can pick and choose which files inside the working directory we want to commite.

git status : shows which files are in staging area (shown in green) and which files are not in staging area (shown in red)

git add <filename> : this command adds the file <filename> to staging area.

git commit -m "<message>" : commits all the files in the staging area. the commit messge should we writtern in present tense for eg:
                            "complete chapter 1"

every commit has a unique hash code to it in order to differentiaite between each commits.
after commiting the file, the file will not longer be in the staging area as it has been commited and is in our local git reposotory.

git log : we can see the commits we have made using this command.

git add . : adds all file inside the working directory to the stagng area.

git diff <filename> : this shows the content which has been deleted in the latest commit/version and the content which has been added to 
                      it.

git checkout <filename> : this will roll back the file <filename> to the last/latest version which was commited in our local reposotary. 

we can push an exsiting local reposotory in our computer to a remote reposotory on the internet

git remote add origin <url> : this command tells our local git reposotory that we have created a remote reposotary named "origin" at <url>
                              theoreticaly you can name "origin" what ever you want, but as convention we name it origin.

the master branch is the default/main branch of our commits/ save points. it is sequential and it is where are main progress is saved/commited.

git push -u origin master : this pushes the local reposotory to the remote reposotory using the -u flag/option which links up the remote 
                            and the local reposotory. then we are going to push it towards the remote reposotory called "origin" and 
                            we are goint to push it to branch master 







